@using Ensco.Utilities
@using System.Data
@using System.Linq;
@{
    string source = this.Session["source"].ToString();
    string sourceId = this.Session["sourceId"].ToString();
    string sourceUrl = this.Session["sourceUrl"].ToString();
    DataTable dt = (DataTable)Model;
    string type = (this.ViewBag.Type == null ? "" : (string)this.ViewBag.Type);
    bool readOnly =(bool ) this.ViewBag.readOnly;

    string caption = "Open CAPA";
    switch(type) {
        case "My":
            caption = "My Open CAPA";
            break;
        case "Rig":
            caption = "My Rig Open CAPA";
            break;
        case "All":
            caption = "All CAPA";
            break;
    }
}
@*//@using(Html.BeginForm(FormMethod.Post)) {*@
@{
    Html.DevExpress().GridView(grid => {
        grid.Caption = EnscoHelper.GetTranslation(caption);
        string gridName = (string)this.ViewBag.gridName ??  "g" + Guid.NewGuid().ToString().Replace("-", "");
        grid.Name =  gridName;
        grid.KeyFieldName = "Id";

        bool showAddButton = true;
        if((source == "Home" && sourceId == "0") || readOnly)  {
            showAddButton = false;
        }

        GridViewOptions options = new GridViewOptions();
        options.ShowAddButton = showAddButton;
        options.ShowEditButton = false;
        options.ShowDeleteButton = false;
        Html.EnscoStandardGrid(grid, null, options);

        string[] arr = new string[] { "SourceUrl" };
        string export = (string)this.Request.Form["__DXCallbackArgument"] ?? "";
        if (!export.Contains("EXPORT"))
            arr= new List<string>(arr) {"Criticality", "ControlHierarchy", "ActionType", "Topic", "Extension", "WO", "CompletionDescription", "DateCompleted", "ReassignedTo" }.ToArray();

        foreach(DataColumn dc in dt.Columns) {
            if(arr != null && arr.Contains(dc.ColumnName))
                continue;
            MVCxGridViewColumn column = grid.Columns.Add(dc.ColumnName);
            Html.InitColumn(column, grid, dc );

            if(dc.ColumnName == "ActionRequired") {
                column.SetDataItemTemplateContent(c => {
                    ViewContext.Writer.Write(DataBinder.Eval(c.DataItem, "ActionRequired").ToString());
                });
            }
            if(dc.DataType.Name.Contains("Date")) {
                column.EditorProperties().DateEdit(s => {
                    s.DisplayFormatString = Ensco.Utilities.UtilitySystem.Settings.ConfigSettings["DateFormat"];
                });
            }
            if(dc.ColumnName == "Id") {
                column.SetDataItemTemplateContent(c => {
                    Html.DevExpress().HyperLink(s => {
                        string Id = DataBinder.Eval(c.DataItem, "Id").ToString();
                        s.Properties.Text = Id;
                        string url = "/irma/capa/index/" + Id;
                        if(DataBinder.Eval(c.DataItem, "Source").ToString().ToLower() == "emoc") {
                            url = DataBinder.Eval(c.DataItem, "SourceUrl").ToString();
                        }
                        s.NavigateUrl = url;
                    }).Render();
                });
            }
            if(dc.ColumnName == "Source") {
                column.SetDataItemTemplateContent(c => {
                    Html.DevExpress().HyperLink(s => {
                        string source1 = DataBinder.Eval(c.DataItem, "Source").ToString();
                        source1 = FirstCharToUpper(source1);
                        source1 = source1.Replace("CapaPlan", "CAPA Plan");
                        s.Properties.Text = source1;
                        s.NavigateUrl = DataBinder.Eval(c.DataItem, "SourceUrl").ToString();
                    }).Render();
                });
            }
        }

        grid.Columns.Remove(grid.Columns["SourceId"]);
        grid.ClientSideEvents.BeginCallback = "function(s, e){ if (typeof onBeginCallbackOpenCapaPartial === 'function' ) onBeginCallbackOpenCapaPartial(s, e ) }";
        //grid.ClientSideEvents.BeginCallback = "function(s, e){  e.customArgs['sourceUrl'] = '" + type+"'}";
        grid.CallbackRouteValues = new { Action = "OpenCapaPartial", Controller = "Capa", Area = "Irma", source, sourceId, sourceUrl, gridName };

        grid.SettingsEditing.AddNewRowRouteValues = new { Area = "irma", Controller = "capa", Action = "AssignPartial" };
        grid.SettingsEditing.Mode = GridViewEditingMode.EditForm;

        grid.SettingsBehavior.ConfirmDelete = true;
        grid.SettingsPopup.EditForm.Width = Unit.Percentage(100);
        grid.Width = Unit.Percentage(100);
        string capaUrl = "/irma/capa/index/0?source=" + source + "&sourceId=" + sourceId + "&sourceUrl=" + sourceUrl;
        grid.SetEditFormTemplateContent(t => {
            Html.ViewContext.Writer.Write("<iframe frameBorder=0 id=f height=680 width=100% src=" + capaUrl + " ></iframe>");
        });
        string script = " if(e.item.GetText()=='Add New'){ e.item.SetText('Close'); s.AddNewRow(); }  ";
        // script += " if (text=='Add New'){ button.SetVisible(false); button.SetText('Close'); s.AddNewRow();}  ";
        script += " else if(e.item.GetText()=='Close') { " + gridName + ".CancelEdit(); }";
        grid.ClientSideEvents.ToolbarItemClick = "function(s, e){" + script + "}";
        grid.ClientSideEvents.EndCallback = "function(s, e){ if (" + gridName + ".IsEditing()){" + gridName + ".GetToolbar(0).GetItem(1).SetText('Close');}  }";

        // Html.ViewContext.Writer.Write(script);
    }).Bind(dt).GetHtml();
    }
    @functions{
        public static string FirstCharToUpper(string s) {
            if(string.IsNullOrEmpty(s))
                return string.Empty;
            return char.ToUpper(s[0]) + s.Substring(1);
        }
    }
