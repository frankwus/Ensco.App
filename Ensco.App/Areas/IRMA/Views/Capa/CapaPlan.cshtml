@model Ensco.Models.IrmaCapaPlanModel
@using Ensco.Utilities
@using Ensco.Models;
@using System.Data;
<script src="/scripts/jquery.unobtrusive-ajax.js"></script>
<script src="/scripts/jquery.unobtrusive-ajax.min.js"></script>
@{
    IrmaCapaModel m = new IrmaCapaModel();
    DataSet ds = (DataSet)this.ViewBag.dsSummary;
    bool readOnly = (bool)this.ViewBag.readOnly;
    string status = Model.Status;
    bool readyToVerify = false;
    if(ds.Tables[2].Rows[0][0].ToString() == "1") {
        readyToVerify = true;
    }
}
<div style="text-align:right"><img style="text-align:right" src="~/Images/pdf.png" onclick="on_PDF('CapaPlan', @Model.Id, 'EN')" /> </div>
@*<div style="text-align:right"><img style="text-align:right" src="~/Images/pdf.png" onclick="on_PDF('oap', '252d25e5-7934-e911-8d48-0050569674e7', 'EN')" /> </div>*@

@Html.DevExpress().PageControl(settings => {
    settings.Name = "pcCapa";
    settings.ActivateTabPageAction = ActivateTabPageAction.Click;
    settings.EnableHotTrack = true;
    settings.SaveStateToCookies = true;
    settings.TabAlign = TabAlign.Left;
    settings.TabPosition = TabPosition.Top;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.ControlStyle.CssClass = "dxtcFixed";
    //settings.ClientSideEvents.ActiveTabChanged = "function(s,e){onActiveTabChanged(s, e) }";

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

    settings.TabPages.Add("Details").SetContent(() => {
        using(Html.BeginForm("CapaPlan", "capa", FormMethod.Post)) {
            Html.DevExpress().FormLayout(form => {
                form.Name = "formCapaPlan";
                form.ShowItemCaptionColon = false;
                form.EncodeHtml = false;
                form.UseDefaultPaddings = false;
                form.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                form.UseDefaultPaddings = true;
                form.RequiredMarkDisplayMode = RequiredMarkMode.RequiredOnly;

                form.Items.AddGroupItem(i => {
                    i.Caption = "";
                    i.ColCount = 3;
                    i.HorizontalAlign = FormLayoutHorizontalAlign.Right;

                    if(!readOnly) {
                        i.Items.Add(item => {
                            item.ShowCaption = DefaultBoolean.False;
                            item.SetNestedContent(() => {
                                Html.DevExpress().Button(s => {
                                    s.Name = "Save";
                                    s.Text = "Save";
                                    s.ClientSideEvents.Click = "function(s,e) {return onSave(s, e); }";
                                }).Render();
                                Html.ViewContext.Writer.Write("&nbsp;");
                                Html.DevExpress().Button(s => {
                                    s.Name = "Delete";
                                    s.Text = "Delete";
                                    s.ClientSideEvents.Click = "function(s,e) {return onCapaPlanDelete(s, e); }";
                                }).Render();
                                Html.ViewContext.Writer.Write("&nbsp;");
                                Html.DevExpress().Button(s => {
                                    s.Name = "Clone";
                                    s.Text = "Clone";
                                    s.ClientSideEvents.Click = "function(s,e) {return onCapaPlanClone(s, e); }";
                                }).Render();
                            });
                        });
                    }
                });

                form.Items.AddGroupItem(i => {
                    i.Caption = "CAPA Plan";
                    i.SettingsItemHelpTexts.Position = HelpTextPosition.Bottom;
                    i.Height = Unit.Percentage(100);
                    i.ColCount = 3;

                    i.Items.Add(x => x.Id, item => {
                        item.FieldName = "Id";
                        item.Caption = "ID";
                        item.NestedExtension().TextBox(s => {
                            s.ClientEnabled = false;
                            s.Width = Unit.Percentage(100);
                        });
                    });
                    i.Items.Add(item => {
                        Html.EnscoCapaEditor(item, x => x.DateCreated, true);
                    });
                    i.Items.Add(item => {
                        Html.EnscoCapaEditor(item, x => x.Status, true);
                    });
                    i.Items.Add(item => {
                        Html.EnscoCapaEditor(item, x => x.Title, readOnly);
                    });
                    i.Items.Add(item => {
                        Html.EnscoCapaEditor(item, x => x.OwnersList, readOnly, null, null, true);
                    });
                    i.Items.Add(item => {
                        Html.EnscoCapaEditor(item, x => x.RigId, readOnly );
                        item.Caption = "Rig/Facility";
                    });
                    i.Items.Add(item => {
                        item.ColumnSpan = 3;
                        Html.EnscoCapaEditor(item, x => x.Description, readOnly);
                    });
                    i.Items.Add(item => {
                        item.Caption = "Attachments";
                        item.Name = "uc1";
                        item.ColumnSpan = 3;
                        item.SetNestedContent(() => {

                            //  Html.RenderAction("UploadPartial");
                            Html.RenderAction("UploadPartial", new { Area = "irma", Controller = "capa", Source = "CapaPlan", id = Model.Id, readOnly });

                        });
                    });
                });
            }).GetHtml();
        }
    });
    settings.TabPages.Add("CAPA").SetContent(() => {
        //Html.BindDataTable("Summary", "Summary", ds.Tables[0]);
        Html.RenderAction("SummaryPartial", "Capa", new { parameter = Model.Id });

        using(Html.BeginForm(FormMethod.Post)) {
            Html.RenderAction("OpenCapaPartial", "Capa", new { source = "CapaPlan", sourceId = Model.Id.ToString(), sourceUrl = "/irma/capa/capaPlan/" + Model.Id , readOnly });
        }
        if(readyToVerify) {
            Html.ViewContext.Writer.Write("<br /> ");
            Html.DevExpress().Button(s => {
                s.Name = "btnVerification";
                s.Text = "Submit for Verification";
                s.ClientSideEvents.Click = "function(s, e){ onSubmitForVerification(s, e) } ";
            }).GetHtml();
        }
        Html.DevExpress().PopupControl(s => {
            s.Name = "pc";
            s.HeaderText = "";
            s.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            s.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
            s.MinWidth = Unit.Pixel(1000);
            s.MinHeight = Unit.Pixel(800);
        }).GetHtml();
    });
    settings.TabPages.Add("Verification").SetContent(() => {
        Html.DevExpress().GridView(grid => {
            grid.Name = "gridVerification";
            grid.Caption = EnscoHelper.GetTranslation("Verification");

            grid.Width = Unit.Percentage(100);

            //Html.EnscoStandardGrid(grid, null, options);
            foreach(DataColumn dc in ds.Tables[1].Columns) {
                if(dc.ColumnName == "AssigneeUserId") {
                    continue;
                }
                MVCxGridViewColumn column = grid.Columns.Add(dc.ColumnName);
                string caption = EnscoHelper.GetTranslation(dc.ColumnName);

                column.Caption = UtilitySystem.SplitPascalCase(caption);
                column.Settings.FilterMode = ColumnFilterMode.DisplayText;
                column.Settings.AllowSort = DefaultBoolean.True;
                column.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.Default;
                column.Settings.AllowHeaderFilter = DefaultBoolean.True;
                column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

                if(dc.ColumnName == "Name") {
                    column.SetDataItemTemplateContent(c => {
                        if(this.IsPending(c)) {
                            EnscoHelper.AddButton(Html, c, "Sign");
                            EnscoHelper.AddButton(Html, c, "Reject");
                        } else
                            Html.DevExpress().Label(s => {
                                s.Text = DataBinder.Eval(c.DataItem, "Name").ToString();
                            }).Render();
                    });
                }
                if(dc.ColumnName == "Comment") {
                    column.SetDataItemTemplateContent(c => {
                        if(this.IsPending(c)) {
                            Html.DevExpress().TextBox(s => {
                                s.Name = "VerificationComment";
                                s.Width = Unit.Percentage(100);
                                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                                s.Properties.ClientSideEvents.Validation = " function(s,e){ onValidationReject(s, e) }";
                            }).Render();
                        } else
                            Html.DevExpress().Label(s => {
                                s.Text = DataBinder.Eval(c.DataItem, "Comment").ToString();
                            }).Render();
                    });
                }
                if(dc.DataType.FullName.Contains("Date")) {
                    column.EditorProperties().DateEdit(s => {
                        s.DisplayFormatString = UtilitySystem.Settings.ConfigSettings["DateFormat"];
                        s.ValidationSettings.Display = Display.Dynamic;
                        s.NullDisplayText = "";
                        s.Width = System.Web.UI.WebControls.Unit.Percentage(100);

                    });
                }
            }
        }).Bind(ds.Tables[1]).GetHtml();
    });
}).GetHtml()
@functions{
    bool IsPending(GridViewDataItemTemplateContainer c) {
        int passportId = 0;
        int.TryParse(DataBinder.Eval(c.DataItem, "AssigneeUserId").ToString(), out passportId);
        //passportId = 2;

        if(DataBinder.Eval(c.DataItem, "Status").ToString() == "Pending" && passportId == UtilitySystem.CurrentUserId)
            return true;
        return false;
    }
}
<script>
    $(document).ready(function () {
        $('.dxflGroupBoxSys').css('border', 'none')
        ConfigSave()
        return
        onEndCallback()
    })
    function onDelete(src) {
        var a = $(src)
        var path = a.next().attr('href')
        a.nextAll().slice(0, 2).hide()
        a.hide()
        var f = $('form')
        $('<input type=hidden name=Removed value ="' + path + '" />').appendTo(f)
    }
    function ConfigSave() {
        $(document).keydown(function (e) {
            var k = e.keyCode
            if (!e.ctrlKey)
                return
            if (k == 83 && e.ctrlKey)
                Save.DoClick()
            return false
        });
    }
    function onCreateCapa(s, e) {
        var id = Id.GetValue()
        var url = '/irma/capa/index/0?sourceId=' + id + '&sourceUrl=' + encodeURIComponent('/irma/capa/capaPlan/' + id) + '&source=CapaPlan'
        pc.SetContentUrl(url)

        pc.Show();
    }
    function onSubmitForVerification(s, e) {
        var id = Id.GetValue()
        GetAjax('/irma/capa/SubmitForVerification/' + id)
        Refresh()
    }
    function onFileUploadComplete(s, e) {
        SubmitForm()
    }
    function onSave(s, e) {
        if (OwnersList.GetValue() == null) {
            OwnersList.SetIsValid(false)
            return
        }
        var files = MultiFileUpload.GetSelectedFiles(0)
        if (files != null && files.length > 0) {
            var id = Id.GetValue()
            var newId = -Math.floor(Math.random() * 1000)
            var f = GetId('MultiFileUpload').closest('form')
            $('<input type=hidden name=SourceFormId value=' + newId + ' />').appendTo(f)
            if (id == 0)
                MultiFileUpload.callbackUrl = MultiFileUpload.callbackUrl.replace('SourceFormId=0', 'SourceFormId=' + newId)
            MultiFileUpload.Upload()
        } else
            SubmitForm()
    }
    function SubmitForm() {
        $('[disabled]').prop('disabled', false)
        GetId('MultiFileUpload').closest('form').submit()
    }
    function onEndCallback() {
        GetId('grid_DXMainTable').children().children().slice(1).each(function () {
            var tr = $(this)
            var td = tr.children().eq(0)
            var id = td.text()
            td.html('<a href=/irma/capa/index/' + id + ' >' + id + '</a>')
        })
    }
    function onBeginCallback(s, e) {
        e.customArgs["Type"] = Id.GetValue();
    }
    function on_Action(action) {
        var tr = $(event.srcElement).closest('tr')
        var id = GetVal(TdByColumn(tr, 'ID'))
        var comment = TdByColumn(tr, 'Comment').find(':text')
        var commentText = GetVal(comment)
        if (action == 'Reject' && commentText == '')
            return

        GetAjaxArr('irma/Capa/VerifyCapaPlan', [id, action, commentText])
        Refresh()
    }
    function OnGetRowValues(values) {
        console.log(values)
    }
    function onValidationReject(s, e) {
        var src = $(event.srcElement)
        if (GetVal(src) == 'Sign')
            return
        //var id = src.closest('tr').children().eq(0).text()
        //if (s.GetText() == '' && s.name == 'Row' + id)
        e.isValid = false
    }
    function GetIndex(tr, name) {
        var index
        tr.children().each(function () {
            var td = $(this)
            if (GetVal(td) == name) {
                index = td.index()
            }
        })
        return index
    }
    function TdByColumn(tr, name) {
        var t = tr.parent().parent()
        var id = t.attr('id')
        var tr0 = GetId(id.replace('_DXMainTable', '_DXHeadersRow0'))
        var index = GetIndex(tr0, name)
        return tr.children().eq(index)
    }
    function onCapaPlanDelete(s, e) {
        if (confirm('Are you sure you want to delete this?')) {
            GetAjax('/irma/capa/CapaPlanDelete/' + Id.GetValue())
            window.location = '/irma/capa/capaPlanHome'
        }
    }
    function onCapaPlanClone(s, e) {
        var json = GetAjax('/irma/capa/CapaPlanClone/' + Id.GetValue())
        window.location = '/irma/capa/capaPlan/' + json[0][0].Id
    }
    function onCapaChanged(s, e) {
        Summary.Refresh()
    }
</script>







